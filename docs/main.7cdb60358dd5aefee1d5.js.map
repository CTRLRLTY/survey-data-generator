{"version":3,"sources":["webpack://SurveyGenerator/./src/index.js"],"names":["convertArrayToCSV","zip","TQ","document","getElementById","main","createAnsBtn","createQForm","generateBtn","saveBtn","header","generation","requestdb","window","indexedDB","open","db","insertQuery","questionContent","choiceContents","trans","transaction","query","objectStore","add","oncomplete","console","log","addQuestion","hostElement","TQClone","content","firstElementChild","cloneNode","buttonTop","querySelector","buttonBottom","question","close","idx","childElementCount","choiceName","answerChoice","fieldset","i","length","ac","indexSpan","choiceSpan","innerText","appendChild","setAttribute","onclick","element","sibling","previousElementSibling","before","moveTop","nextElementSibling","after","moveBottom","this","parentNode","remove","textContent","value","qIndexes","querySelectorAll","choices","answersInput","forEach","choice","index","randomizeAnswer","questionWrappers","w","answers","Math","floor","random","checked","onerror","event","alert","target","errorCode","onsuccess","req","result","openCursor","queries","e","cursor","push","continue","fragment","createDocumentFragment","q","append","childNodes","onupgradeneeded","objectStoreNames","contains","createObjectStore","autoIncrement","submitContainer","getElementsByClassName","answerInput","answerCount","insertBefore","onsubmit","preventDefault","data","FormData","get","answerList","getAll","acc","stored","entry","values","csvFile","file","amount","parseInt","prompt","requestSubmit","generateAsync","type","then","URI","a","createElement","href","download","body","click","removeChild","async","storeName","Promise","resolve","reject","clear","answerNodes","answer","slice","extractMain"],"mappings":"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","file":"main.7cdb60358dd5aefee1d5.js","sourcesContent":["const dbName = \"surgen\";\nconst { convertArrayToCSV } = require('convert-array-to-csv');\nconst converter = require('convert-array-to-csv');\nconst JSZip = require('jszip');\nconst zip = new JSZip();\nconst TQ = document.getElementById('TQ');\nconst main = document.getElementById('main');\nconst createAnsBtn = document.getElementById('create-answer');\nconst createQForm = document.getElementById('create-question');\nconst generateBtn = document.getElementById('generateBtn');\nconst saveBtn = document.getElementById('saveBtn');\nconst header = ['Query', 'Answer'];\n\nvar generation = 0;\nvar requestdb = window.indexedDB.open(dbName, 5); \nvar db = null;\n\nrequestdb.onerror = function(event) {\n  alert(`Database error: ${event.target.errorCode}`);\n  db = null;\n};\n\n\nrequestdb.onsuccess = function(event) {\n  db = event.target.result;\n  let trans = db.transaction(['queries'], 'readonly');\n  let queriesStore = trans.objectStore('queries');\n  let req = queriesStore.openCursor();\n  let queries = [];\n\n  req.onsuccess = (e) => {\n    let cursor = e.target.result;\n    if (cursor != null) {\n      queries.push(cursor.value);\n      cursor.continue();\n    } else {\n      let fragment = document.createDocumentFragment();\n      queries.forEach(q => {\n        addQuestion(fragment, q.questionContent, q.choiceContents);\n      });\n      main.append(...fragment.childNodes);\n      console.log('info: cursor fetched all!');\n    }\n  }\n  \n  db.onerror = (e) => {\n    alert(e.target.errorCode);\n  };\n};\n\n\nrequestdb.onupgradeneeded = function(event) {\n  db = event.target.result; \n  let queries = db.objectStoreNames.contains('queries') ? requestdb.transaction.objectStore('queries') : db.createObjectStore('queries', {autoIncrement: true});\n};\n\n\ncreateAnsBtn.onclick = addAnswerHandler;\ncreateQForm.onsubmit = addQHandler;\nmain.onsubmit = onSubmit;\ngenerateBtn.onclick = generateHandler;\nsaveBtn.onclick = saveHandle;\n\n\nfunction insertQuery(db, questionContent, choiceContents) {\n  if (db) {\n    let trans = db.transaction(['queries'], 'readwrite');\n    let store = trans.objectStore('queries');\n    let query = {questionContent, choiceContents};\n    store.add(query);\n    trans.oncomplete = () => console.log('info: query added to db');\n  }\n}\n\n\nfunction addAnswerHandler(e) {\n  const fieldset = document.getElementById(\"fieldset\");\n  const submitContainer = document.getElementsByClassName(\"submit-container\")[0];\n  const template = document.getElementById(\"answer-input\");\n  const content = template.content;\n  const answerInput = content.cloneNode(true);\n  const indexSpan = answerInput.querySelector(\"span\");\n  const answerCount = fieldset.querySelectorAll(\"input[name=answer]\").length;\n  indexSpan.innerText = \"\" + answerCount;\n\n\n  fieldset.insertBefore(answerInput, submitContainer);\n}\n\n\nfunction addQuestion(hostElement, questionContent, choiceContents) {\n  let TQClone = TQ.content.firstElementChild.cloneNode(true);\n  let buttonTop = TQClone.querySelector('.up');\n  let buttonBottom = TQClone.querySelector('.bottom');\n  let question = TQClone.querySelector('.question') \n  let query = TQClone.querySelector('.q-query');\n  let close = TQClone.querySelector('.close');\n  let idx = main.childElementCount;\n  let choiceName = `choice-${idx}`;\n\n\n  let answerChoice = document.getElementById(\"answer-choice\");\n  let fieldset = TQClone.querySelector(\"fieldset\");\n\n  for(i = 0; i < choiceContents.length; ++i) {\n    let ac = answerChoice.content.cloneNode(true);\n    let indexSpan = ac.querySelector(\".q-index\");\n    let choiceSpan = ac.querySelector(\".q-choice\");\n    indexSpan.innerText = i;\n    choiceSpan.innerText = choiceContents[i];\n    fieldset.appendChild(ac);\n  }\n\n  TQClone.setAttribute('data-idx', idx);\n  buttonTop.onclick = () => moveTop(TQClone);\n  buttonBottom.onclick = () => moveBottom(TQClone);\n  close.onclick = function() { this.parentNode.remove() };\n\n  question.textContent = questionContent;\n  query.value = questionContent;\n\n\n  let qIndexes = TQClone.querySelectorAll('.q-index');\n  let choices = TQClone.querySelectorAll('.q-choice');\n  let answersInput = TQClone.querySelectorAll('.answer');\n\n  choices.forEach((choice, index) => {\n    choice.textContent = choiceContents[index];\n    answersInput[index].value = `${qIndexes[index].textContent}. ${choiceContents[index]}`;\n    // Name Mangling for each choices\n    choice.parentNode.firstElementChild.setAttribute('name', choiceName);\n  });\n\n  hostElement.appendChild(TQClone);\n}\n\nfunction addQHandler(e) {\n  e.preventDefault();\n\n  let data = new FormData(createQForm);\n\n  let question = data.get('question');\n  let answerList = data.getAll('answer');\n\n  addQuestion(main, question, answerList);\n}\n\nfunction randomizeAnswer() {\n  let questionWrappers = document.querySelectorAll('.wrapper');\n  for(const w of questionWrappers) {\n    let answers = w.querySelectorAll('.answer');\n    let index = Math.floor(Math.random() * answers.length);\n    answers[index].checked = true;\n  }\n}\n\nfunction generateHandler() {\n  if(main.childElementCount) {\n    let amount = parseInt(window.prompt('Generate Amount: ', '0'));\n\n    for(let i = 0; i < amount; ++i) {\n      randomizeAnswer();\n      main.requestSubmit();\n    }\n    zip.generateAsync({type: \"base64\"}).then((URI) => {\n      // Link Injection\n      let a = document.createElement('a');\n      a.href = \"data:application/zip;base64,\"+URI;\n      a.download = \"surveys.zip\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    });\n  } else {\n    alert('You need to have atleast one question!');\n  }\n}\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  let data = new FormData(main);\n  let acc = 0;\n  let stored = []\n  for(const entry of data.values()) {\n    if(!(acc % 2)) \n      stored.push([])\n    stored[stored.length - 1].push(entry);\n    ++acc;\n  }\n\n  let csvFile = convertArrayToCSV(stored,{header}); \n  zip.file(`${generation}.csv`, csvFile)\n  ++generation;\n}\n\nfunction moveTop(element) {\n  let sibling = element.previousElementSibling;\n  if(sibling) \n    sibling.before(element);\n  \n}\n\nfunction moveBottom(element) {\n  let sibling = element.nextElementSibling;\n  if(sibling) \n    sibling.after(element);\n}\n\nfunction extractMain() {\n  let queries = [];\n  main.childNodes.forEach(e => {\n    let questionContent = e.querySelector('.question').textContent;\n    let answerNodes = e.querySelectorAll('.answer');\n    let choiceContents = [];\n    answerNodes.forEach((answer) => choiceContents.push(answer.value.slice(3)));\n    queries.push({questionContent, choiceContents});\n  });\n  return queries;\n}\n\nfunction clearData(storeName) {\n  return new Promise((resolve, reject) => {\n    let trans = db.transaction([storeName], 'readwrite');\n    let queriesStore = trans.objectStore(storeName);\n    let req = queriesStore.clear();\n    req.onsuccess = () => resolve();\n    req.onerror = () => reject();\n  });\n}\n\nasync function saveHandle() {\n  await clearData('queries');\n  for (const {questionContent, choiceContents} of extractMain()) \n    insertQuery(db, questionContent, choiceContents);\n  \n\n  alert('Data Saved!');\n}\n"],"sourceRoot":""}